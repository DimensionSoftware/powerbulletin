#!./node_modules/.bin/lsc

require! {
  \fs
  \jsdom
  \async
  \util
  program: \commander
  pg: '../app/postgres'
  __: \lodash
  h: '../app/helpers'
  sioa: 'socket.io-announce'
}
global <<< require \prelude-ls
pg.init!
announce = sioa.create-client!

url = # {{{1
  forum: (forum-id) ->
    "http://www.mixedmartialarts.com/mma.cfm?go=forum.splash&forum=#{forum-id}"
  thread: (forum-id, thread-id, page=1) ->
    "http://www.mixedmartialarts.com/mma.cfm?go=forum.posts&thread=#{thread-id}&forum=#{forum-id}&page=#{page}&pc=143"

threads-from-forum = (forum-id, cb) -> # {{{1
  threads = []
  console.log "fetching forum #{forum-id}"
  jsdom.env(
    url.forum(forum-id),
    ["http://code.jquery.com/jquery.js"],
    (err, window) ->
      if err then return cb(err)
      $ = window.$
      $('.ThreadList td.First').each (i, td) ->
        $a = $(td).find('a:first')
        count = parseInt $(td).next().next().text()
        pages = Math.ceil(count / 25)
        if $a.length
          id    = $a.attr('href').match(/thread=(\d+)/)?[1]
          title = $a.text()
          threads.push {
            thread-id : id
            forum-id  : forum-id
            title     : title
            posts     : [ ]
            pages     : pages
            count     : count
          }
      cb null, threads
  )

with-posts = (max, t, cb) --> # {{{1
  forum-id = t.forum-id
  thread-id = t.thread-id
  actual-pages = Math.min(max, t.pages)
  console.log "fetching #{actual-pages} pages of posts for thread - #{t.title}"
  fetch-posts = (page, cb) ->
    util.print "#page "
    jsdom.env(
      url.thread(forum-id, thread-id, page)
      ["http://code.jquery.com/jquery.js"],
      (err, window) ->
        if err then return cb(err)
        $ = window.$
        _posts = []
        $('.PostList .PostContent').each (i, p) ->
          html = $(p).html!replace(/<img src=".*?(droid|apple).png.*?">/g, '')
          post =
            parent-id : thread-id
            forum-id  : forum-id
            user-id   : 3
            title     : ""
            body      : html
            html      : html
          _posts.push post
        cb null, _posts
    )
  async.map-series [1 to actual-pages], fetch-posts, (err, posts) ->
    util.print "\n"
    t.posts = __.flatten posts
    t.body = t.posts?0?body || "\n"
    t.html = t.posts?0?html || "\n"
    t.posts.shift!
    cb null, t

create-thread-for-site = (site-id, t, cb) --> # {{{1
  console.log "\ninserting top post f:#{t.forum-id} title:'#{t.title}'"
  top-post =
    user_id    : 1
    forum_id   : t.forum-id
    title      : t.title
    body       : t.body
    html       : t.html
    build_docs : false

  emit = (type, id) ->
    err, new-post <- pg.procs.post id
    announce.emit type, new-post

  pg.procs.add-post top-post, (err, insertion) ->
    if err then return cb(err)
    emit \thread-create, insertion.id

    create-post = (p, cb) ->
      q = {}
      for k,v of p
        key = k.replace(/([A-Z])/g, ($1) -> return "_"+$1.toLowerCase())
        q[key] = v
      q.thread_id = q.parent_id = insertion.id
      q.build_docs = false

      pg.procs.add-post q, (err, r) ->
        if not err
          util.print "."
          emit \post-create, r.id
        cb(err, r)

    t.posts.shift!
    async.map-series t.posts, create-post, cb

delay-by = (ms, fn) --> # {{{1
  (param, cb) ->
    (setTimeout (-> fn(param, cb)), ms)

# }}}
#.
#### main   ###############>======-- -   -
##
#
#
#

defaults =
  site  : 1
  forum : 1
  delay : 1500
  max   : 3

program
  .option  '-s, --site <id>',            "site id  (default: #{defaults.site})",                                         parseInt, defaults.site
  .option  '-f, --forum <id>',           "forum id (default: #{defaults.forum})",                                        parseInt, defaults.forum
  .option  '-d, --delay <milliseconds>', "amount of time to wait in between HTTP requests (default: #{defaults.delay})", parseInt, defaults.delay
  .option  '-m, --max <pages>',          "maximum pages per thread to scrape (default: #{defaults.max})",                parseInt, defaults.max
  .parse process.argv

delayed = delay-by program.delay # gratuitous use of partial application ;)

err, threads <- threads-from-forum program.forum
if err then console.warn err
console.log "found #{threads.length} threads for forum #{program.forum}"

with-posts-max = with-posts program.max
err, threads-with-posts <- async.map-series threads, (delayed with-posts-max)
if err then console.warn err

err, r <- async.map-series threads-with-posts, (create-thread-for-site program.site)
if err then console.warn(err)
console.log "\n"
process.exit 0

# vim:ft=ls fdm=marker
